@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager // lets us go from page to page //
@inject ProtectedSessionStorage sessionStorage  // browser session storage to save settings //

<h1 class="page-heading text-uppercase mb-4">Training Suggestions</h1>
<div class="suggestion-container">
	<button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-light btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
	<div class="suggestions-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
	<div class="col-md-4 col-xl-5 btn-group">
		<button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
		<button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Popular</button>
	</div>
	<div class="col-md-4 col-xl-3 search-box">
		<input type="text" 
			placeholder="Search" 
			aria-label="Search box" class="form-control rounded-control"
			@oninput="((txt) => OnSearchInput((string)txt.Value))"/>
	</div>
</div>

<div class="row">
	<div class="col-md-8 col-xl-9">
		@if (suggestions is not null)
		{
			<Virtualize Items="@suggestions" Context="s" OverscanCount="10">
				<div class="suggestion-entry">
					<div class="@GetVoteClass(s)" @onclick="(() => VoteUp(s))">
						<div class="text-uppercase">@GetUpvoteTopText(s)</div>
						<span class="oi oi-caret-top" style="font-size: 3rem"></span>
						<div class="text-uppercase">@GetUpvoteBottomText(s)</div>
					</div>

					<div class="suggestion-entry-text">
						<div class="suggestion-entry-text-title" @onclick="(() => OpenDetails(s))">
							@s.Suggestion
						</div>
						<div>
							<div class="suggestion-entry-text-category" @onclick="(() => OpenDetails(s))">
								@s.Category?.CategoryName
							</div>
						</div>
					</div>

					<div class="suggestion-entry-status @GetSuggestionStatusClass(s)">
						<div class="suggestion-entry-status-text">
							@s.SuggestionStatus?.StatusName
						</div>
					</div>
				</div>
			</Virtualize>
		}
	</div>

	<div class="col-md-4 col-xl-3">
		@if (categories is not null)
		{
			<div class="categories">
				<span class="text-uppercase fw-bold">Category</span>
				<div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">All</div>
				@foreach (var c in categories)
				{
					<div class="@GetSelectedCategory(c.CategoryName)" @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
				}
			</div>
		}

		@if (statuses is not null)
		{
			<div class="statuses">
				<span class="text-uppercase fw-bold">Status</span>
				<div class="@GetSelectedStatus()" @onclick="(() => OnStatusClick())">All</div>
				@foreach (var s in statuses)
				{
					<div class="@GetSelectedStatus(s.StatusName)" @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
				}
			</div>
		}
	</div>
</div>

@code {
	private UserModel loggedInUser;
	private List<SuggestionModel> suggestions;
	private List<CategoryModel> categories;
	private List<StatusModel> statuses;

	private string selectedCategory = "All";
	private string selectedStatus = "All";
	private string searchText = "";
	bool isSortedByNew = true;

	protected override async Task OnInitializedAsync()
	{
		categories = await categoryData.GetAllCategories();
		statuses = await statusData.GetAllStatuses();
		await LoadAndVerifyUser();

	}

	private void LoadCreatePage()
	{
		if (loggedInUser is not null)
		{
			navManager.NavigateTo("/Create");
		}
		else
		{
			navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true); //forced load
		}
	}

	private async Task LoadAndVerifyUser()
	{
		var authState = await authProvider.GetAuthenticationStateAsync();
		string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

		//no objectidentifier means you arent logged in
		if (string.IsNullOrWhiteSpace(objectId) == false)
		{
			loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new(); //either get object from DB for user or returns null; if we don't find one, instantiate

			string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
			string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
			string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value; //since this claim is just "name", we have to match on the string since contains wont work
			string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

			bool isDirty = false; //if any of the values are changed vs what we have saved in DB, update
			if (objectId.Equals(loggedInUser.ObjectIdntifier) == false)
			{
				//this only happens if we have a new user
				isDirty = true;
				loggedInUser.ObjectIdntifier = objectId;
			}
			if (firstName.Equals(loggedInUser.FirstName) == false)
			{
				//this only happens if we have a new user
				isDirty = true;
				loggedInUser.FirstName = firstName;
			}
			if (lastName.Equals(loggedInUser.LastName) == false)
			{
				//this only happens if we have a new user
				isDirty = true;
				loggedInUser.LastName = lastName;
			}
			if (displayName.Equals(loggedInUser.DisplayName) == false)
			{
				//this only happens if we have a new user
				isDirty = true;
				loggedInUser.DisplayName = displayName;
			}
			if (email.Equals(loggedInUser.EmailAddress) == false)
			{
				//this only happens if we have a new user
				isDirty = true;
				loggedInUser.EmailAddress = email;
			}

			if (isDirty)
			{
				if (string.IsNullOrWhiteSpace(loggedInUser.Id))
				{
					//first time user has logged in
					await userData.CreateUser(loggedInUser);
				}
				else
				{
					await userData.UpdateUser(loggedInUser);
				}
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadFilterState();
			await FilterSuggestions();
			StateHasChanged();
		}
	}

	private async Task LoadFilterState()
	{
		var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
		selectedCategory = stringResults.Success ? stringResults.Value : "All"; //if we successfully got from session storage then use the value; otherwise all

		stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
		selectedStatus = stringResults.Success ? stringResults.Value : "All";

		stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
		searchText = stringResults.Success ? stringResults.Value : "";

		var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
		isSortedByNew = boolResults.Success ? boolResults.Value : true;
	}

	private async Task SaveFilterState()
	{
		//key, value
		await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
		await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
		await sessionStorage.SetAsync(nameof(searchText), searchText);
		await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
	}

	private async Task FilterSuggestions()
	{
		var output = await suggestionData.GetAllApprovedSuggestions();

		if (selectedCategory != "All")
		{
			output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
		}

		if (selectedStatus != "All")
		{
			output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
		}

		if (string.IsNullOrWhiteSpace(searchText) == false)
		{
			output = output.Where(
				s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
				s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
			).ToList();
		}

		if (isSortedByNew)
		{
			output = output.OrderByDescending(s => s.DateCreated).ToList();
		}
		else
		{
			output = output.OrderByDescending(s => s.UserVotes.Count)
							.ThenByDescending(s => s.DateCreated)
							.ToList();
		}

		suggestions = output;

		await SaveFilterState();
	}

	private async Task OrderByNew(bool isNew)
	{
		isSortedByNew = isNew;
		await FilterSuggestions();
	}

	private async Task OnSearchInput(string searchInput)
	{
		searchText = searchInput;
		await FilterSuggestions();
	}

	private async Task OnCategoryClick(string category = "All")
	{
		selectedCategory = category;
		await FilterSuggestions();
	}

	private async Task OnStatusClick(string status = "All")
	{
		selectedStatus = status;
		await FilterSuggestions();
	}

	private async Task VoteUp(SuggestionModel suggestion)
	{
		if (loggedInUser is not null)
		{
			if (suggestion.Author.Id == loggedInUser.Id)
			{
				//cant vote on your own suggestion
				return;
			}

			//check to see if we can add the upvote or not
			if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
			{
				//suggestion was in list, remove it since clicking a second time removes the upvote
				suggestion.UserVotes.Remove(loggedInUser.Id);
			}
		}
		else
		{
			navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true); //if you click to upvote while not logged in, it takes you to signin page; forceLoad ensures we go to that URL
		}

		//save to database
		await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);

		if (isSortedByNew == false)
		{
			//sorting by popularity
			suggestions = suggestions
				.OrderByDescending(s => s.UserVotes.Count)
				.ThenByDescending(s => s.DateCreated)
				.ToList();

		}
	}

	private string GetUpvoteTopText(SuggestionModel suggestion)
	{
		if (suggestion.UserVotes?.Count > 0)
		{
			return suggestion.UserVotes.Count.ToString("00"); //i.e. 01, 02, 10, 11, 12 etc
		}
		else
		{
			if (suggestion.Author.Id == loggedInUser?.Id)
			{
				//cant upvote your own suggestion
				return "Awaiting";
			}
			else
			{
				return "Click To";
			}
		}
	}

	private string GetUpvoteBottomText(SuggestionModel suggestion)
	{
		if (suggestion.UserVotes?.Count > 1)
		{
			return "Upvotes";
		}
		else
		{
			return "Upvote";
		}
	}

	private void OpenDetails(SuggestionModel suggestion)
	{
		navManager.NavigateTo($"/Details/{suggestion.Id}"); // /Details/1234
	}

	private string SortedByNewClass(bool isNew)
	{
		if (isNew == isSortedByNew)
		{
			return "sort-selected";
		}
		else
		{
			return "";
		}

	}

	private string GetVoteClass(SuggestionModel suggestion)
	{
		if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
		{
			return "suggestion-entry-no-votes";
		}
		else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
		{
			return "suggestion-entry-voted"; //current user voted on it
		}
		else 
		{
			return "suggestion-entry-not-voted"; //there is votes but not voted on by the current user
		}
	}

	private string GetSuggestionStatusClass(SuggestionModel suggestion)
	{
		if (suggestion is null || suggestion.SuggestionStatus is null)
		{
			return "suggestion-entry-status-none";
		}

		string output = suggestion.SuggestionStatus.StatusName switch
		{
			"Complete" => "suggestion-entry-status-completed",
			"Watching" => "suggestion-entry-status-watching",
			"Upcoming" => "suggestion-entry-status-upcoming",
			"Dismissed" => "suggestion-entry-status-dismissed",
			_ => "suggestion-entry-status-none",
		};

		return output;
	}

	private string GetSelectedCategory(string category = "All")
	{
		if (category == selectedCategory)
		{
			return "selected-category";
		}
		else 
		{
			return "";
		}
	}

	private string GetSelectedStatus(string status = "All")
	{
		if (status == selectedStatus)
		{
			return "selected-status";
		}
		else
		{
			return "";
		}
	}
}