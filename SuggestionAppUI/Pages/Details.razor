@page "/Details/{Id}"
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager

<h1>Suggestion Details</h1>

<div>
	<div>
		@if (suggestion is not null)
		{
			<div>
				<div>
					<div @onclick="VoteUp">
						<div>@GetUpvoteTopText()</div>
						<span class="oi oi-caret-top"></span>
						<div>@GetUpvoteBottomText()</div>
					</div>
					<div>
						<div>@suggestion.DateCreated.ToString("MM.dd.yyyy")</div>
					</div>
				</div>

				<div>
					<div>@suggestion.Suggestion</div>
					<div>@suggestion.Author.DisplayName</div>
					<div>@suggestion.Description</div>
					<div>
						@suggestion.Category.CategoryName
					</div>
				</div>
				<div>
					<button @onclick="ClosePage"></button>
				</div>
			</div>
		}
	</div>
</div>

@if (suggestion?.SuggestionStatus is not null)
{
	<div>
		<div>
			<div></div>
			<div>
				<div>
					@suggestion.SuggestionStatus.StatusName
				</div>
				<div>
					@((MarkupString)suggestion.OwnerNotes)
				</div>
			</div>
		</div>
	</div>
}



@code {
	[Parameter]
	public string Id { get; set; } //public so other pages can access this variable
	private UserModel loggedInUser;

	private SuggestionModel suggestion;

	protected async override Task OnInitializedAsync()
	{
		suggestion = await suggestionData.GetSuggestion(Id);
		loggedInUser = await authProvider.GetUserFromAuth(userData);
	}

	private void ClosePage()
	{
		navManager.NavigateTo("/");
	}

	private string GetUpvoteTopText()
	{
		if (suggestion.UserVotes?.Count > 0)
		{
			return suggestion.UserVotes.Count.ToString("00"); //i.e. 01, 02, 10, 11, 12 etc
		}
		else
		{
			if (suggestion.Author.Id == loggedInUser?.Id)
			{
				//cant upvote your own suggestion
				return "Awaiting";
			}
			else
			{
				return "Click To";
			}
		}
	}

	private string GetUpvoteBottomText()
	{
		if (suggestion.UserVotes?.Count > 1)
		{
			return "Upvotes";
		}
		else
		{
			return "Upvote";
		}
	}

	private async Task VoteUp()
	{
		if (loggedInUser is not null)
		{
			if (suggestion.Author.Id == loggedInUser.Id)
			{
				//cant vote on your own suggestion
				return;
			}

			//check to see if we can add the upvote or not
			if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
			{
				//suggestion was in list, remove it since clicking a second time removes the upvote
				suggestion.UserVotes.Remove(loggedInUser.Id);
			}
		}
		else
		{
			navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true); //if you click to upvote while not logged in, it takes you to signin page; forceLoad ensures we go to that URL
		}

		//save to database
		await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
	}
}
